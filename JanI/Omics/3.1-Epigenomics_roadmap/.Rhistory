cat(command,"\n")
try(system(command))
file.info(out)$size->size
if(size>0){
res=read.table(out,header=F)
unlink(a.file);unlink(b.file);unlink(out)
return(res)
}
}
bedTools.2jac<-function(functionstring="/home/jj/bedtools2/bin/bedtools jaccard",bed1,bed2,opt.string=""){
#create temp files
a.file=tempfile()
b.file=tempfile()
out   =tempfile()
options(scipen=99) # not to use scientific notation when writing out
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
write.table(bed2,file=b.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-a",a.file,"-b",b.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
file.info(out)$size->size
if(size>0){
res=read.table(out,header=F)
unlink(a.file);unlink(b.file);unlink(out)
return(res)
}
}
#### BEDtools R functions
bedTools.2in<-function(functionstring="/home/jj/Desktop/Bioinformatics/2nd_year/3term/Omics_Techniques/Seminars/3.1-Epigenomics_roadmap/bedtools2/bin/intersectBed",bed1,bed2,opt.string=""){
#create temp files
a.file=tempfile()
b.file=tempfile()
out   =tempfile()
options(scipen=99) # not to use scientific notation when writing out
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
write.table(bed2,file=b.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-a",a.file,"-b",b.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
file.info(out)$size->size
if(size>0){
res=read.table(out,header=F)
unlink(a.file);unlink(b.file);unlink(out)
return(res)
}
}
bedTools.2merge<-function(functionstring="/home/jj/Desktop/Bioinformatics/2nd_year/3term/Omics_Techniques/Seminars/3.1-Epigenomics_roadmap/bedtools2/bin/mergeBed",bed1,opt.string=""){
#create temp files
a.file=tempfile()
out   =tempfile()
options(scipen =99)
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-i",a.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
res=read.table(out,header=F)
unlink(a.file);unlink(out)
return(res)
}
bedTools.2sort<-function(functionstring="/home/jj/Desktop/Bioinformatics/2nd_year/3term/Omics_Techniques/Seminars/3.1-Epigenomics_roadmap/bedtools2/bin/sortBed",bed1,opt.string=""){
#create temp files
a.file=tempfile()
out   =tempfile()
options(scipen =99)
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-i",a.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
res=read.table(out,header=F)
unlink(a.file);unlink(out)
return(res)
}
bedTools.2closest<-function(functionstring="/home/jj/Desktop/Bioinformatics/2nd_year/3term/Omics_Techniques/Seminars/3.1-Epigenomics_roadmap/bedtools2/bin/closestBed",bed1,bed2,opt.string=""){
#create temp files
a.file=tempfile()
b.file=tempfile()
out   =tempfile()
options(scipen=99) # not to use scientific notation when writing out
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
write.table(bed2,file=b.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-a",a.file,"-b",b.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
file.info(out)$size->size
if(size>0){
res=read.table(out,header=F)
unlink(a.file);unlink(b.file);unlink(out)
return(res)
}
}
bedTools.2sub<-function(functionstring="/home/jj/Desktop/Bioinformatics/2nd_year/3term/Omics_Techniques/Seminars/3.1-Epigenomics_roadmap/bedtools2/bin/subtractBed",bed1,bed2,opt.string=""){
#create temp files
a.file=tempfile()
b.file=tempfile()
out   =tempfile()
options(scipen=99) # not to use scientific notation when writing out
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
write.table(bed2,file=b.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-a",a.file,"-b",b.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
file.info(out)$size->size
if(size>0){
res=read.table(out,header=F)
unlink(a.file);unlink(b.file);unlink(out)
return(res)
}
}
bedTools.2jac<-function(functionstring="/home/jj/Desktop/Bioinformatics/2nd_year/3term/Omics_Techniques/Seminars/3.1-Epigenomics_roadmap/bedtools2/bin/bedtools jaccard",bed1,bed2,opt.string=""){
#create temp files
a.file=tempfile()
b.file=tempfile()
out   =tempfile()
options(scipen=99) # not to use scientific notation when writing out
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
write.table(bed2,file=b.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-a",a.file,"-b",b.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
file.info(out)$size->size
if(size>0){
res=read.table(out,header=F)
unlink(a.file);unlink(b.file);unlink(out)
return(res)
}
}
knitr::opts_chunk$set(echo = TRUE)
source("/home/jj/bedtools2/BEDtoolsR.R")
metadata<-read.table("/home/jj/Desktop/Bioinformatics/2nd_year/3term/Omics_Techniques/Seminars/3.1-Epigenomics_roadmap/metadata.roadmap_clean.txt", sep="\t")
metadata$PERIOD<-ifelse("fetal|Fetal")
#### BEDtools R functions
bedTools.2in<-function(functionstring="/home/jj/bedtools2/bin/intersectBed",bed1,bed2,opt.string=""){
#create temp files
a.file=tempfile()
b.file=tempfile()
out   =tempfile()
options(scipen=99) # not to use scientific notation when writing out
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
write.table(bed2,file=b.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-a",a.file,"-b",b.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
file.info(out)$size->size
if(size>0){
res=read.table(out,header=F)
unlink(a.file);unlink(b.file);unlink(out)
return(res)
}
}
bedTools.2merge<-function(functionstring="/home/jj/bedtools2/bin/mergeBed",bed1,opt.string=""){
#create temp files
a.file=tempfile()
out   =tempfile()
options(scipen =99)
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-i",a.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
res=read.table(out,header=F)
unlink(a.file);unlink(out)
return(res)
}
bedTools.2sort<-function(functionstring="/home/jj/bedtools2/bin/sortBed",bed1,opt.string=""){
#create temp files
a.file=tempfile()
out   =tempfile()
options(scipen =99)
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-i",a.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
res=read.table(out,header=F)
unlink(a.file);unlink(out)
return(res)
}
bedTools.2closest<-function(functionstring="/home/jj/bedtools2/bin/closestBed",bed1,bed2,opt.string=""){
#create temp files
a.file=tempfile()
b.file=tempfile()
out   =tempfile()
options(scipen=99) # not to use scientific notation when writing out
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
write.table(bed2,file=b.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-a",a.file,"-b",b.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
file.info(out)$size->size
if(size>0){
res=read.table(out,header=F)
unlink(a.file);unlink(b.file);unlink(out)
return(res)
}
}
bedTools.2sub<-function(functionstring="/home/jj/bedtools2/bin/subtractBed",bed1,bed2,opt.string=""){
#create temp files
a.file=tempfile()
b.file=tempfile()
out   =tempfile()
options(scipen=99) # not to use scientific notation when writing out
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
write.table(bed2,file=b.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-a",a.file,"-b",b.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
file.info(out)$size->size
if(size>0){
res=read.table(out,header=F)
unlink(a.file);unlink(b.file);unlink(out)
return(res)
}
}
bedTools.2jac<-function(functionstring="/home/jj/bedtools2/bin/bedtools jaccard",bed1,bed2,opt.string=""){
#create temp files
a.file=tempfile()
b.file=tempfile()
out   =tempfile()
options(scipen=99) # not to use scientific notation when writing out
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
write.table(bed2,file=b.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-a",a.file,"-b",b.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
file.info(out)$size->size
if(size>0){
res=read.table(out,header=F)
unlink(a.file);unlink(b.file);unlink(out)
return(res)
}
}
source("/home/jj/bedtools2/BEDtoolsR.R")
metadata<-read.table("/home/jj/Desktop/Bioinformatics/2nd_year/3term/Omics_Techniques/Seminars/3.1-Epigenomics_roadmap/metadata.roadmap_clean.txt", sep="\t")
metadata$PERIOD<-ifelse("fetal|Fetal")
View(metadata)
source("/home/jj/bedtools2/BEDtoolsR.R")
metadata<-read.table("/home/jj/Desktop/Bioinformatics/2nd_year/3term/Omics_Techniques/Seminars/3.1-Epigenomics_roadmap/metadata.roadmap_clean.txt", sep="\t")
View(metadata)
if (grepl("fetal|Fetal", metadata$V3)){
metadata$PERIOD<-TRUE
}else{metadata$PERIOD<-FALSE}
if (grepl("fetal|Fetal", metadata$V3)){
metadata$PERIOD<-TRUE
}
metadata$PERIOD<-ifelsegrepl("fetal|Fetal", metadata$V3)
metadata$PERIOD<-ifelse(grepl("fetal|Fetal", metadata$V3))
metadata$PERIOD
metadata$PERIOD<-ifelse(grepl("fetal|Fetal", metadata$V3))
metadata$PERIOD<-ifelse(grepl("fetal|Fetal", metadata$V3), "Fetal", "Adult")
source("/home/jj/bedtools2/BEDtoolsR.R")
metadata<-read.table("/home/jj/Desktop/Bioinformatics/2nd_year/3term/Omics_Techniques/Seminars/3.1-Epigenomics_roadmap/metadata.roadmap_clean.txt", sep="\t")
View(metadata)
if (grepl("fetal|Fetal", metadata$V3)){
metadata$PERIOD<-"TRUE"
}else{
metadata$PERIOD<-"FALSE"
}
#Distinguish Fetal and Non-setal samples
metadata$PERIOD<-ifelse(grepl("fetal|Fetal", metadata$V3), TRUE, FALSE)
filtered_metadata<-filter(grepl(paste(interest_tissues, collapse="|"), metadata$V2))
#Choosing tissues
interest_tissues<-c("Brain", "brain", "Muscle", "muscle", "Digestive", "digestive", "Heart", "heart")
filtered_metadata<-filter(grepl(paste(interest_tissues, collapse="|"), metadata$V2))
filtered_metadata<-filter(grepl(paste(interest_tissues, collapse="|"), metadata$V2), ignore.case=TRUE)
filtered_metadata<-metadata %<% filter(grepl(paste(interest_tissues, collapse="|"), V2), ignore.case=TRUE)
filtered_metadata<-metadata %>% filter(grepl(paste(interest_tissues, collapse="|"), V2), ignore.case=TRUE)
filtered_metadata<-filter(grepl(paste(interest_tissues, collapse="|"), metadata$V2), ignore.case=TRUE)
samples<-filter(metadata, V2 %in% tissues)
samples<-filter(metadata, V2 %in% tissues)$V1
samples<-filter(metadata, metadat$V2 %in% tissues)$V1
samples<-filter(metadata, metadata$V2 %in% tissues)$V1
#Choosing tissues
tissues<-c("Brain", "brain", "Muscle", "muscle", "Digestive", "digestive", "Heart", "heart")
samples<-filter(metadata, metadata$V2 %in% tissues)$V1
samples<-filter(metadata, $V2 %in% tissues)$V1
samples<-filter(metadata, V2 %in% tissues)$V1
samples<-filter(metadata, V2 %in% tissues)$V1
#Create a new column with UniqueNames incorporating the tissue and PERIOD information
metadata$UniqueName<-paste0(metadata$V2, "_", metadata$PERIOD)
#Choosing tissues
tissues<-c("Brain", "brain", "Muscle", "muscle", "Digestive", "digestive", "Heart", "heart")
samples<-filter(metadata, V2 %in% tissues)$V1
filtered_metadata<-filter(grepl(paste(tissues, collapse="|"), metadata$V2), ignore.case=TRUE)
filtered_metadata<-dplyr::filter(grepl(paste(tissues, collapse="|"), metadata$V2), ignore.case=TRUE)
filtered_metadata<-dplyr::filter(grepl(paste(tissues, collapse="|"), V2), ignore.case=TRUE)
library(dplyr)
library(dplyr)
filtered_metadata<-dplyr::filter(grepl(paste(tissues, collapse="|"), V2), ignore.case=TRUE)
samples<-filter(metadata, V2 %in% tissues)$V1
samples<-dplyr::filter(metadata, V2 %in% tissues)$V1
filtered_metadata<-dplyr::filter(grepl(paste(tissues, collapse="|"), metadata$V2), ignore.case=TRUE)
paste(tissues, collapse="|")
filtered_metadata<-dplyr::filter(grepl(paste(tissues, collapse="|"), metadata$V2)==TRUE)
filtered_metadata<-metadata(grepl(paste(tissues, collapse="|"), metadata$V2)==TRUE)
filtered_metadata<-metadata[grepl(paste(tissues, collapse="|"), metadata$V2)==TRUE]
filtered_metadata<-metadata[grepl(paste(tissues, collapse="|"), metadata$V2)==TRUE,]
filtered_metadata<-dplyr::filter(metadata, V2 %in% tissues)$V1
filtered_metadata<-metadata[grepl(paste(tissues, collapse="|"), metadata$V2)==TRUE,]
filtered_metadata<-metadata[grepl(paste(tissues, collapse="|"), metadata$V2)==TRUE,]
filtered_metadata<-metadata[grepl(paste(tissues, collapse="|"), metadata$V2)==TRUE,]
View(filtered_metadata)
View(filtered_metadata)
source("/home/jj/bedtools2/BEDtoolsR.R")
metadata<-read.table("/home/jj/Desktop/Bioinformatics/2nd_year/3term/Omics_Techniques/Seminars/3.1-Epigenomics_roadmap/metadata.roadmap_clean.txt", sep="\t")
View(metadata)
#Distinguish Fetal and Non-fetal samples
metadata$PERIOD<-ifelse(grepl("fetal|Fetal", metadata$V3), TRUE, FALSE)
#Create a new column with UniqueNames incorporating the tissue and PERIOD information
metadata$UniqueName<-paste0(metadata$V2, "_", metadata$PERIOD)
#Choosing tissues
tissues<-c("Brain", "brain", "Muscle", "muscle", "Digestive", "digestive", "Heart", "heart")
filtered_metadata<-dplyr::filter(metadata, V2 %in% tissues)$V1 #Teacher's method
filtered_metadata<-metadata[grepl(paste(tissues, collapse="|"), metadata$V2)==TRUE,] #database of only the files that interest us
roadmap<-list()
for (f in filtered_metadata$V1){ #first column contains names that are in the middle of files
filename<-paste0("all.mnemonics.bedFiles/",f,"_18_core_K27ac_mnemonics.bed.gz") #f is the first column (filenames)
if (file.exists(filename)){ #if file exists
print(f)
roadmap[[f]]<-read.table(gzfile(filename)) #all contents of file to roadmap
}
}
View(roadmap)
roadmap<-list()
for (f in filtered_metadata$V1){ #first column contains the id that differs the files from each other (id of entry as well)
filename<-paste0("all.mnemonics.bedFiles/",f,"_18_core_K27ac_mnemonics.bed.gz") #f is the ids
if (file.exists(filename)){ #in case that a file does not exist, avoid errors
print(f)
roadmap[[f]]<-read.table(gzfile(filename)) #all contents of file to roadmap #"dictionary" with the ID as key
}
}
source("/home/jj/bedtools2/BEDtoolsR.R")
metadata<-read.table("/home/jj/Desktop/Bioinformatics/2nd_year/3term/Omics_Techniques/Seminars/3.1-Epigenomics_roadmap/metadata.roadmap_clean.txt", sep="\t")
View(metadata)
#Distinguish Fetal and Non-fetal samples
metadata$PERIOD<-ifelse(grepl("fetal|Fetal", metadata$V3), "Fetal", "Adult")
#Create a new column with UniqueNames incorporating the tissue, PERIOD and ID information
metadata$UniqueName<-paste0(metadata$V2, "_", metadata$PERIOD, "_", metadata$V1)
#Choosing tissues
tissues<-c("Brain", "brain", "Muscle", "muscle", "Digestive", "digestive", "Heart", "heart")
filtered_metadata<-dplyr::filter(metadata, V2 %in% tissues)$V1 #Teacher's method
filtered_metadata<-metadata[grepl(paste(tissues, collapse="|"), metadata$V2)==TRUE,] #database of only the files that interest us (all that contain any of the words of tissues in column metadata$V2)
roadmap<-list()
for (f in filtered_metadata$V1){ #first column contains the id that differs the files from each other (id of entry as well)
filename<-paste0("all.mnemonics.bedFiles/",f,"_18_core_K27ac_mnemonics.bed.gz") #f is the ids
if (file.exists(filename)){ #in case that a file does not exist, avoid errors
print(f)
roadmap[[f]]<-read.table(gzfile(filename)) #all contents of file to roadmap #"dictionary" with the ID as key
}
}
View(filtered_metadata)
roadmap$E071$V4
roadmap$E071$V1
roadmap$E071$V2
roadmap$E071$V3
#Changing ID "keys" to UniqueNames that we generated before
names(roadmap)<-mapvalues(names(roadmap), from=metadata$V1, to=metadata$UniqueName)
#Changing ID "keys" to UniqueNames that we generated before
library(plyr)
names(roadmap)<-mapvalues(names(roadmap), from=metadata$V1, to=metadata$UniqueName)
roadmap[["Muscle_Fetal_E089"]] %>% head()
names(roadmap)
#Doing the intersection
state="1_TssA"
bed1<-filter(roadmap[["Muscle_Fetal_E090"]], V4=state) #V4 are the promoters
bed1<-dplyr::filter(roadmap[["Muscle_Fetal_E090"]], V4=state) #V4 are the promoters
bed1<-dplyr::filter(roadmap[["Muscle_Fetal_E090"]], V4==state) #V4 are the promoters
bed2<-dplyr::filter(roadmap[["Digestive_Adult_E102"]], V4==state)
b1<-dplyr::filter(roadmap[["Muscle_Fetal_E090"]], V4==state) #V4 are the promoters (if we did all genomes it'd almost the same), we choose 1 promoter
b2<-dplyr::filter(roadmap[["Digestive_Adult_E102"]], V4==state)
bedTools.2jac(bed1=b1,bed2=b2)
m<-matrix(nrow=length(rnames), ncol=nrow, dimnames=list(rnames), names(roadmap))
#do for all members in names(roadmap) and place in a matrix
rnames<-names(roadmap)
m<-matrix(nrow=length(rnames), ncol=nrow, dimnames=list(rnames), names(roadmap))
m<-matrix(nrow=length(rnames), ncol=length(names(roadmap)), dimnames=list(rnames), names(roadmap))
m<-matrix(nrow=length(rnames), ncol=length(rnames), dimnames=list(rnames), names(roadmap))
?echo
m<-matrix(nrow=length(rnames), ncol=length(rnames), dimnames=list(rnames), names(roadmap)) #matrix of rnames dimensions
for (i in rnames){
for (j in rnames){
print(c(i,j))
a<-filter(roadmap[[i]], V4==state)
b<-filter(roadmap[[j]], V4==state)
index_num<-bedTools.2jac(a,b)
m[i,j]<-index_num
}
}
for (i in rnames){
for (j in rnames){
print(c(i,j))
a<-filter(roadmap[[i]], V4==state)
b<-filter(roadmap[[j]], V4==state)
index_num<-bedTools.2in(a,b)
m[i,j]<-index_num
}
}
for (i in rnames){
for (j in rnames){
print(c(i,j))
a<-filter(roadmap[[i]], V4==state)
b<-filter(roadmap[[j]], V4==state)
index_num<-bedTools.2in(bed1=a,bed2=b)
m[i,j]<-index_num
}
}
#### BEDtools R functions
bedTools.2in<-function(functionstring="./bin/intersectBed",bed1,bed2,opt.string=""){
#create temp files
a.file=tempfile()
b.file=tempfile()
out   =tempfile()
options(scipen=99) # not to use scientific notation when writing out
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
write.table(bed2,file=b.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-a",a.file,"-b",b.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
file.info(out)$size->size
if(size>0){
res=read.table(out,header=F)
unlink(a.file);unlink(b.file);unlink(out)
return(res)
}
}
bedTools.2merge<-function(functionstring="./bin/mergeBed",bed1,opt.string=""){
#create temp files
a.file=tempfile()
out   =tempfile()
options(scipen =99)
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-i",a.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
res=read.table(out,header=F)
unlink(a.file);unlink(out)
return(res)
}
bedTools.2sort<-function(functionstring="./bin/sortBed",bed1,opt.string=""){
#create temp files
a.file=tempfile()
out   =tempfile()
options(scipen =99)
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-i",a.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
res=read.table(out,header=F)
unlink(a.file);unlink(out)
return(res)
}
bedTools.2closest<-function(functionstring="./bin/closestBed",bed1,bed2,opt.string=""){
#create temp files
a.file=tempfile()
b.file=tempfile()
out   =tempfile()
options(scipen=99) # not to use scientific notation when writing out
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
write.table(bed2,file=b.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-a",a.file,"-b",b.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
file.info(out)$size->size
if(size>0){
res=read.table(out,header=F)
unlink(a.file);unlink(b.file);unlink(out)
return(res)
}
}
bedTools.2sub<-function(functionstring="./bin/subtractBed",bed1,bed2,opt.string=""){
#create temp files
a.file=tempfile()
b.file=tempfile()
out   =tempfile()
options(scipen=99) # not to use scientific notation when writing out
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
write.table(bed2,file=b.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-a",a.file,"-b",b.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
file.info(out)$size->size
if(size>0){
res=read.table(out,header=F)
unlink(a.file);unlink(b.file);unlink(out)
return(res)
}
}
bedTools.2jac<-function(functionstring="./bin/bedtools jaccard",bed1,bed2,opt.string=""){
#create temp files
a.file=tempfile()
b.file=tempfile()
out   =tempfile()
options(scipen=99) # not to use scientific notation when writing out
write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
write.table(bed2,file=b.file,quote=F,sep="\t",col.names=F,row.names=F)
command=paste(functionstring,"-a",a.file,"-b",b.file,opt.string,">",out,sep=" ")
cat(command,"\n")
try(system(command))
file.info(out)$size->size
if(size>0){
res=read.table(out,header=F)
unlink(a.file);unlink(b.file);unlink(out)
return(res)
}
}
knitr::opts_chunk$set(echo = TRUE)
source("./bedtools2/BEDtoolsR.R")
metadata<-read.table("./metadata.roadmap_clean.txt", sep="\t")
View(metadata)
#Create a new column with UniqueNames incorporating the tissue, PERIOD and ID information
metadata$UniqueName<-paste0(metadata$V2, "_", metadata$PERIOD, "_", metadata$V1)
#Choosing tissues
tissues<-c("Brain", "brain", "Muscle", "muscle", "Digestive", "digestive", "Heart", "heart")
filtered_metadata<-dplyr::filter(metadata, V2 %in% tissues)$V1 #Teacher's method
filtered_metadata<-metadata[grepl(paste(tissues, collapse="|"), metadata$V2)==TRUE,] #database of only the files that interest us (all that contain any of the words of tissues in column metadata$V2)
