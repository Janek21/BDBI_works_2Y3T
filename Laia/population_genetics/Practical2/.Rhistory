sample(c(1:10), size = 3, replace = T)
# Random sampling three elements of a vector with replacement
set.seed(4)
sample(c(1:10), size = 3, replace = T)
# Random sampling six elements of a vector with replacement with probabilities
sample(c('Good', 'Defective'), size = 6, replace = T, prob = c(0.75, 0.25))
# Random DNA sequence generator taking into account GC content
nucleotides = c("A", "T", "C", "G")
composition = c(0.3, 0.3, 0.2, 0.2)
lengthSeq = 100
seq100 <- sample(nucleotides, size = lengthSeq, prob = composition, replace = T)
length(seq100)
table(seq100)
table(seq100)/lengthSeq
# 20 alleles
# 10 Ne
# allele A: p = 0.8
# allele a q = 0.2
alleles = c("A", "a")
freq = c(0.8, 0.2)
Ne = 10
sample_alleles = sample(alleles, size = 2*Ne, prob = freq, replace = T)
table(sample_alleles)
table(sample_alleles)/(2*Ne)
# Genetic drift
# Simulation of random drift trajectory of allele frequency for one locus with two alleles
# Ne = effective population size; tgen = number of generation simulated; p_0 = initial frequency of allele A)
# A single trajectory (a linear random walk)
genetic_drift <- function(p_0, Ne, tgen) {
alleles <- c(1, 0) # 1 A and 0 a (numerical for estimating frequency directly)
pvector <- c() # Store p allele frequency values over generations
pvector[1] <- p_0 # First value is initial p frequency
p_ = p_0
for (i in 2:(tgen+1)) {
p_ = sum(sample(alleles, size = 2*Ne, prob = c(p_, 1-p_), replace = T))/(2*Ne) ;
pvector[i] = p_ # Add new frequency
}
plot(pvector, ylim = c(0, 1),
col="coral2", type = "l",lwd = 3,
main = paste("Genetic drift - Population size = ", Ne),
xlab = "Generation", ylab = "Frequency of p")
}
# Call the function
genetic_drift(0.5, 100, 100)
# Binomial simulation in r
rbinom(n = 7, size = 150, prob = 0.05)
N <- 4 # set population size
p <- 0.5 # set allele frequency
# Binomial sampling to get the new frequency of the A1 in the next generation
rbinom(n = 1, size = 2*N, prob = p)/(2*N)
# Genetic drift
# Simulation of random drift trajectory of allele frequency for one
# locus with two alleles
# Ne = effective population size; tgen = number of generation simulated;
# p_0 = initial frequency allele A)
# A single trajectory (a linear random walk)
# using random binomial distribution function
genetic_drift <- function(p_0, Ne, tgen) {
pvector <- c()
pvector[1] <- p_0
p_ = p_0
for(i in 2:(tgen+1)) {
p_ = rbinom(1,2*Ne,p_)/(2*Ne) # Random binomial distribution
pvector[i] <- p_
}
plot(pvector, ylim = c(0,1),
col="coral2", type = "l", lwd = 3,
main = paste("Genetic drift - Population size = ",Ne), xlab="Generations" , ylab = "Relative frequency")
}
# Call the function
genetic_drift(0.7, 50, 100)
genetic_drift <- function(p_0, Ne, tgen, nrepl) {
# Empty plot
plot(0,0, xlim=c(0,tgen+1), ylim = c(0,1),
col="coral2", type = "l", lwd = 3,
main = paste("Genetic drift - Population size = ",Ne), xlab="Generations",
ylab = "Relative frequency")
# For to iterate over replicates
for (n in 1:nrepl) {
pvector <- c()
pvector[1] <- p_0
p_ = p_0
for(i in 2:(tgen+1)) {
p_ = rbinom(1,2*Ne,p_)/(2*Ne);
pvector[i] <- p_
}
# Draw a line for each replicate
lines(pvector, type = "l", col = n, lwd = 2)
}
}
# Call the function
genetic_drift(0.3, 100, 100, 10)
genetic_drift <- function(p_0, Ne, tgen, nrepl) {
plot(0,0, xlim=c(0,tgen+1), ylim = c(0,1),
col="coral2", type = "l", lwd = 3,
main = paste("Genetic Drift - Population size = ",Ne), xlab="Generations" , ylab = "Relative frequency")
meanpvector <- 0*c(1:(tgen+1))
meanpvector[1] <- p_0
for (n in 1:nrepl) {
pvector <- c()
pvector[1] <- p_0
p_ = p_0
for(i in 2:(tgen+1)) {
p_ = rbinom(1,2*Ne,p_)/(2*Ne);
pvector[i] <- p_
meanpvector[i]=meanpvector[i]+pvector[i]/nrepl
}
lines(pvector, type = "l", col = n, lwd = 2)
}
# Add mean
lines(meanpvector, type = "l",  col = "coral4",  lwd = 6)
legend("topleft", legend=paste("Mean = ", round(mean(meanpvector),3)),
col=c("coral4"), lty=1, lwd=3, cex=0.8)
}
genetic_drift(0.5, 500, 100, 10)
popSizes = c(500, 500, 500, 10, 500)
mean(popSizes) # Mean
1/mean(1/popSizes) # Harmonic mean
# Recurrent
mut_dyn <- function(p0, mu, tgen) {
plot(0, 0, xlim = c(0,tgen), ylim = c(0,1), main =
paste("Recurrent mutation – mu = ",mu),  xlab="Generation", ylab="q",
type="l")
freqvector <- c()
freqvector[1] <- 1-p0
for (i in 1:tgen){
freqvector[i+1]<-1 - p0*(1- mu)^i
}
lines(freqvector, type = "l", lwd=3, col="coral4")
}
mut_dyn(1,0.0001,10000)
# Recurrent retromutation
mut_dyn_retro <- function(p0,mu,nu,tgen) {
plot(0,0,xlim = c(0,tgen),ylim = c(0,1),type = "l", main =
paste("Mutation and retromutaion – mu = ",mu,"nu =",nu), xlab="Generation",
ylab="q")
freqvector <- c()
freqvector[1]<- 1-p0
for (i in 1:tgen) {
freqvector[i+1]<-freqvector[i] + mu*(1-freqvector[i])- nu*freqvector[i]
}
lines(freqvector, type = "l",lwd=3, col="deepskyblue4")
}
mut_dyn_retro(1,0.0001,0.00001,10000)
res1 <- genetic_drift(0.5, 500, 100, 20)
res2 <- genetic_drift(0.5, 100, 100, 20)
res3 <- genetic_drift(0.5, 10, 100, 20)
res4 <- genetic_drift(0.9, 500, 100, 20)
res5 <- genetic_drift(0.9, 100, 100, 20)
res6 <- genetic_drift(0.9, 10, 100, 20)
res1
genetic_drift <- function(p_0, Ne, tgen, nrepl) {
# Empty plot
plot(0,0, xlim=c(0,tgen+1), ylim = c(0,1),
col="coral2", type = "l", lwd = 3,
main = paste("Genetic drift - Population size = ",Ne), xlab="Generations",
ylab = "Relative frequency")
# For to iterate over replicates
for (n in 1:nrepl) {
pvector <- c()
pvector[1] <- p_0
p_ = p_0
for(i in 2:(tgen+1)) {
p_ = rbinom(1,2*Ne,p_)/(2*Ne);
pvector[i] <- p_
}
# Draw a line for each replicate
lines(pvector, type = "l", col = n, lwd = 2)
}
}
# Call the function
genetic_drift(0.3, 100, 100, 10)
res1 <- genetic_drift(0.5, 500, 100, 20)
res2 <- genetic_drift(0.5, 100, 100, 20)
res1 <- genetic_drift(0.5, 500, 100, 20)
res2 <- genetic_drift(0.5, 100, 100, 20)
res3 <- genetic_drift(0.5, 10, 100, 20)
res2 <- genetic_drift(0.5, 100, 100, 20)
res2 <- genetic_drift(0.5, 100, 100, 20)
res2 <- genetic_drift(0.5, 100, 100, 20)
res2 <- genetic_drift(0.5, 100, 100, 20)
res1 <- genetic_drift(0.5, 500, 100, 20)
res2 <- genetic_drift(0.5, 100, 100, 20)
res3 <- genetic_drift(0.5, 10, 100, 20)
res4 <- genetic_drift(0.9, 500, 100, 20)
res4 <- genetic_drift(0.9, 500, 100, 20)
res4 <- genetic_drift(0.9, 500, 100, 20)
res4 <- genetic_drift(0.9, 500, 100, 20)
res2 <- genetic_drift(0.5, 100, 100, 20)
res2 <- genetic_drift(0.5, 100, 100, 20)
res3 <- genetic_drift(0.5, 10, 100, 20)
res3 <- genetic_drift(0.5, 10, 100, 20)
res4 <- genetic_drift(0.9, 500, 100, 20)
res5 <- genetic_drift(0.9, 100, 100, 20)
<-
res6 <- genetic_drift(0.9, 10, 100, 20)
res6 <- genetic_drift(0.9, 10, 100, 20)
res6 <- genetic_drift(0.9, 10, 100, 20)
res6 <- genetic_drift(0.9, 10, 100, 20)
res6 <- genetic_drift(0.9, 10, 100, 20)
res6 <- genetic_drift(0.9, 10, 100, 20)
res6 <- genetic_drift(0.9, 10, 100, 20)
res6 <- genetic_drift(0.9, 10, 100, 20)
res6 <- genetic_drift(0.9, 10, 100, 20)
res6 <- genetic_drift(0.9, 10, 100, 20)
print(paste(p_))
p_
genetic_drift <- function(p_0, Ne, tgen, nrepl) {
# Empty plot
plot(0,0, xlim=c(0,tgen+1), ylim = c(0,1),
col="coral2", type = "l", lwd = 3,
main = paste("Genetic drift - Population size = ",Ne), xlab="Generations",
ylab = "Relative frequency")
# For to iterate over replicates
for (n in 1:nrepl) {
pvector <- c()
pvector[1] <- p_0
p_ = p_0
for(i in 2:(tgen+1)) {
p_ = rbinom(1,2*Ne,p_)/(2*Ne);
pvector[i] <- p_
}
# Draw a line for each replicate
lines(pvector, type = "l", col = n, lwd = 2)
print(paste(p_))
}
}
# Call the function
genetic_drift(0.3, 100, 100, 10)
# (p_0, Ne, tgen, nrepl)
res1 <- genetic_drift(0.5, 500, 100, 20)
res1
res1 <- genetic_drift(0.5, 500, 100, 20)
res2 <- genetic_drift(0.5, 100, 100, 20)
res2 <- genetic_drift(0.5, 100, 100, 20)
res3 <- genetic_drift(0.5, 10, 100, 20)
res3
res4 <- genetic_drift(0.9, 500, 100, 20)
res5 <- genetic_drift(0.9, 100, 100, 20)
res6 <- genetic_drift(0.9, 10, 100, 20)
genetic_drift(0.5, 500, 100, 20) # All of them are polymorphic
genetic_drift(0.9, 500, 100, 20) # All the alleles are have really high frequencies, few of them are fixed
genetic_drift(0.9, 100, 100, 20) # Some of the alleles are fixed, a few remain polymorphic
genetic_drift(0.5, 500, 100, 10)
genetic_drift <- function(p_0, Ne, tgen, nrepl) {
plot(0,0, xlim=c(0,tgen+1), ylim = c(0,1),
col="coral2", type = "l", lwd = 3,
main = paste("Genetic Drift - Population size = ",Ne), xlab="Generations" , ylab = "Relative frequency")
meanpvector <- 0*c(1:(tgen+1))
meanpvector[1] <- p_0
for (n in 1:nrepl) {
pvector <- c()
pvector[1] <- p_0
p_ = p_0
for(i in 2:(tgen+1)) {
p_ = rbinom(1,2*Ne,p_)/(2*Ne);
pvector[i] <- p_
meanpvector[i]=meanpvector[i]+pvector[i]/nrepl
}
lines(pvector, type = "l", col = n, lwd = 2)
}
# Add mean
lines(meanpvector, type = "l",  col = "coral4",  lwd = 6)
legend("topleft", legend=paste("Mean = ", round(mean(meanpvector),3)),
col=c("coral4"), lty=1, lwd=3, cex=0.8)
}
genetic_drift(0.5, 500, 100, 10)
genetic_drift(0.5, 500, 100, 10)
genetic_drift(0.2, 500, 100, 10)
genetic_drift(0.2, 500, 100, 10)
genetic_drift(0.9, 500, 100, 10)
genetic_drift(0.9, 500, 100, 10)
genetic_drift(0.9, 500, 100, 10)
genetic_drift(0.9, 500, 100, 10)
genetic_drift(0.9, 500, 100, 10)
genetic_drift(0.9, 500, 100, 10)
genetic_drift(0.9, 500, 100, 10)
genetic_drift(0.5, 100, 100, 10)
genetic_drift(0.5, 100, 100, 10)
genetic_drift(0.2, 100, 100, 10)
genetic_drift(0.9, 100, 100, 10)
genetic_drift(0.5, 10, 100, 10)
genetic_drift(0.2, 10, 100, 10)
genetic_drift(0.9, 10, 100, 10)
genetic_drift(0.9, 10, 100, 10)
genetic_drift(0.9, 10, 100, 10)
genetic_drift(0.9, 10, 100, 10)
genetic_drift(0.9, 10, 100, 10)
genetic_drift(0.9, 10, 100, 10)
genetic_drift(0.9, 10, 100, 10)
genetic_drift(0.9, 10, 100, 10)
genetic_drift(0.9, 10, 100, 10)
genetic_drift(0.9, 10, 100, 10)
genetic_drift(0.9, 100, 100, 10)
genetic_drift(0.9, 500, 100, 10)
genetic_drift(0.2, 10, 100, 10)
genetic_drift(0.2, 100, 100, 10)
genetic_drift(0.2, 500, 100, 10)
genetic_drift(0.5, 10, 100, 10)
genetic_drift(0.5, 500, 100, 10)
genetic_drift(0.5, 100, 100, 10)
genetic_drift(0.5, 10, 100, 10)
genetic_drift_bottleneck <- function(p_0, Ne, tgen, nrepl, bottleneck) {
plot(0,0, xlim=c(0,tgen+1), ylim = c(0,1),
col="coral2", type = "l", lwd = 3,
main = paste("Genetic Drift - Population size = ",Ne), xlab="Generations" , ylab = "Relative frequency")
meanpvector <- 0*c(1:(tgen+1))
meanpvector[1] <- p_0
for (n in 1:nrepl) {
pvector <- c()
pvector[1] <- p_0
p_ = p_0
for(i in 2:(tgen+1)) {
if (i == bottleneck) {
p_ = rbinom(1, 2*10, p_) / (2*10)
} else {
p_ = rbinom(1, 2*Ne, p_) / (2*Ne)
}
pvector[i] <- p_
meanpvector[i]=meanpvector[i]+pvector[i]/nrepl
}
lines(pvector, type = "l", col = n, lwd = 2)
}
# Add mean
lines(meanpvector, type = "l",  col = "coral4",  lwd = 6)
legend("topleft", legend=paste("Mean = ", round(mean(meanpvector),3)),
col=c("coral4"), lty=1, lwd=3, cex=0.8)
}
genetic_drift(0.5, 1000, 100, 10)
genetic_drift_bottleneck(0.5, 1000, 100, 10, 50)
genetic_drift_bottleneck(0.5, 1000, 100, 10, 50)
genetic_drift_bottleneck(0.5, 1000, 100, 10, 50)
genetic_drift_bottleneck(0.5, 1000, 100, 10, 50)
genetic_drift_bottleneck(0.5, 1000, 100, 10, 50)
genetic_drift(0.5, 1000, 100, 10)
genetic_drift_bottleneck(0.5, 1000, 100, 10, 50)
genetic_drift(0.5, 1000, 100, 50)
genetic_drift_bottleneck(0.5, 1000, 100, 50, 50)
genetic_drift_bottleneck
genetic_drift_bottleneck(0.5, 1000, 100, 10, 50)
genetic_drift_bottleneck <- function(p_0, Ne, tgen, nrepl) {
plot(0,0, xlim=c(0,tgen+1), ylim = c(0,1),
col="coral2", type = "l", lwd = 3,
main = paste("Genetic Drift - Population size (bottleneck) = ",Ne), xlab="Generations" , ylab = "Relative frequency")
meanpvector <- 0*c(1:(tgen+1))
meanpvector[1] <- p_0
for (n in 1:nrepl) {
pvector <- c()
pvector[1] <- p_0
p_ = p_0
for(i in 2:(tgen+1)) {
if(i==50){
Ne = 10
}else(
Ne = 1000
)
p_ = rbinom(1,2*Ne,p_)/(2*Ne);
pvector[i] <- p_
meanpvector[i]=meanpvector[i]+pvector[i]/nrepl
}
lines(pvector, type = "l", col = n, lwd = 2)
print(paste(p_))
}
# Add mean
lines(meanpvector, type = "l",  col = "coral4",  lwd = 6)
legend("topleft", legend=paste("Mean = ", round(mean(meanpvector),3)),
col=c("coral4"), lty=1, lwd=3, cex=0.8)
}
genetic_drift(0.5, 1000, 100, 10)
genetic_drift_bottleneck(0.5, 1000, 100, 10)
genetic_drift_bottleneck <- function(p_0, Ne, tgen, nrepl) {
plot(0,0, xlim=c(0,tgen+1), ylim = c(0,1),
col="coral2", type = "l", lwd = 3,
main = paste("Genetic Drift - Population size (bottleneck) = ",Ne), xlab="Generations" , ylab = "Relative frequency")
meanpvector <- 0*c(1:(tgen+1))
meanpvector[1] <- p_0
for (n in 1:nrepl) {
pvector <- c()
pvector[1] <- p_0
p_ = p_0
for(i in 2:(tgen+1)) {
if(i==50){
Ne = 10
}else{
Ne = 1000
}
p_ = rbinom(1,2*Ne,p_)/(2*Ne);
pvector[i] <- p_
meanpvector[i]=meanpvector[i]+pvector[i]/nrepl
}
lines(pvector, type = "l", col = n, lwd = 2)
print(paste(p_))
}
# Add mean
lines(meanpvector, type = "l",  col = "coral4",  lwd = 6)
legend("topleft", legend=paste("Mean = ", round(mean(meanpvector),3)),
col=c("coral4"), lty=1, lwd=3, cex=0.8)
}
genetic_drift(0.5, 1000, 100, 10)
genetic_drift_bottleneck(0.5, 1000, 100, 10)
rep(1000,99)
c(10,rep(1000,99))
v <- c(10,rep(1000,99))
Ne_mean <- mean(v)
Ne_harm <- 1/mean(1/v)
genetic_drift(0.5, Ne_mean, 100, 10)
genetic_drift(0.5, Ne_harm, 100, 10)
v <- c(10,rep(1000,99))
Ne_mean <- mean(v)
Ne_mean
Ne_harm <- 1/mean(1/v)
Ne_harm
genetic_drift(0.5, Ne_mean, 100, 10)
genetic_drift <- function(p_0, Ne, tgen, nrepl) {
plot(0,0, xlim=c(0,tgen+1), ylim = c(0,1),
col="coral2", type = "l", lwd = 3,
main = paste("Genetic Drift - Population size = ",Ne), xlab="Generations" , ylab = "Relative frequency")
meanpvector <- 0*c(1:(tgen+1))
meanpvector[1] <- p_0
for (n in 1:nrepl) {
pvector <- c()
pvector[1] <- p_0
p_ = p_0
for(i in 2:(tgen+1)) {
p_ = rbinom(1,2*Ne,p_)/(2*Ne);
pvector[i] <- p_
meanpvector[i]=meanpvector[i]+pvector[i]/nrepl
}
lines(pvector, type = "l", col = n, lwd = 2)
}
# Add mean
lines(meanpvector, type = "l",  col = "coral4",  lwd = 6)
legend("topleft", legend=paste("Mean = ", round(mean(meanpvector),3)),
col=c("coral4"), lty=1, lwd=3, cex=0.8)
}
genetic_drift(0.5, 500, 100, 10)
genetic_drift(0.5, Ne_mean, 100, 10)
Ne_mean <- mean(v)
Ne_harm
Ne_mean
genetic_drift(0.5, Ne_mean, 100, 10)
genetic_drift(0.5, 1000, 100, 10)
Ne_mean
genetic_drift(0.5, 990, 100, 10)
genetic_drift(0.5, 990.1, 100, 10)
Ne_mean <- round(mean(v), 0)
Ne_mean
Ne_harm <- round(1/mean(1/v), 0)
genetic_drift(0.5, Ne_mean, 100, 10)
genetic_drift(0.5, Ne_harm, 100, 10)
genetic_drift(0.5, Ne_harm, 100, 10)
genetic_drift(0.5, Ne_mean, 100, 10)
genetic_drift(0.5, Ne_harm, 100, 10)
genetic_drift(0.5, Ne_mean, 100, 10)
genetic_drift(0.5, Ne_harm, 100, 10)
genetic_drift(0.5, Ne_mean, 100, 10)
genetic_drift(0.5, Ne_harm, 100, 10)
p0 <- 0.8
mu <- 0.000004
nu <- 0.0000006
tgen <- 50000
mut_dyn_retro(p0, mu, nu, tgen)
# Recurrent retromutation
mut_dyn_retro <- function(p0,mu,nu,tgen) {
plot(0,0,xlim = c(0,tgen),ylim = c(0,1),type = "l", main =
paste("Mutation and retromutaion – mu = ",mu,"nu =",nu), xlab="Generation",
ylab="q")
freqvector <- c()
freqvector[1]<- 1-p0
for (i in 1:tgen) {
freqvector[i+1]<-freqvector[i] + mu*(1-freqvector[i])- nu*freqvector[i]
}
lines(freqvector, type = "l",lwd=3, col="deepskyblue4")
print(freqvector)
}
mut_dyn_retro(p0, mu, nu, tgen)
# Recurrent retromutation
mut_dyn_retro <- function(p0,mu,nu,tgen) {
plot(0,0,xlim = c(0,tgen),ylim = c(0,1),type = "l", main =
paste("Mutation and retromutaion – mu = ",mu,"nu =",nu), xlab="Generation",
ylab="q")
freqvector <- c()
freqvector[1]<- 1-p0
for (i in 1:tgen) {
freqvector[i+1]<-freqvector[i] + mu*(1-freqvector[i])- nu*freqvector[i]
}
lines(freqvector, type = "l",lwd=3, col="deepskyblue4")
return freqvector
return(freqvector)
# Recurrent retromutation
mut_dyn_retro <- function(p0,mu,nu,tgen) {
plot(0,0,xlim = c(0,tgen),ylim = c(0,1),type = "l", main =
paste("Mutation and retromutaion – mu = ",mu,"nu =",nu), xlab="Generation",
ylab="q")
freqvector <- c()
freqvector[1]<- 1-p0
for (i in 1:tgen) {
freqvector[i+1]<-freqvector[i] + mu*(1-freqvector[i])- nu*freqvector[i]
}
lines(freqvector, type = "l",lwd=3, col="deepskyblue4")
return(freqvector)
}
mut_dyn_retro(1,0.0001,0.00001,10000)
x <- mut_dyn_retro(1,0.0001,0.00001,10000)
fr[-1]
fr <- mut_dyn_retro(p0, mu, nu, tgen)
fr[-1]
fr <- mut_dyn_retro(p0, mu, nu, tgen)
fr[-1]
fr[length(fr)]
fr <- mut_dyn_retro(p0, mu, nu, tgen)
fr[length(fr)]
