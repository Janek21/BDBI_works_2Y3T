# One-gene  3-alleles: X1, X2, X3
# Genotypes:  X11, X12, X13, X22, X23, X33
# Sample size genotype ij -> Nij
# The input data are the counts of each genotype ordered
# Create the function
HWE_test_3alleles <- function(N11, N12, N13, N22, N23, N33) {
N = N11 + N12 + N13 + N22 + N23 + N33 # N total sample
# Allele frequencies estimation
p = (N11 + N12/2 + N13/2)/N # p is the frequency of X1
q = (N22 + N12/2 + N23/2)/N # q is the frequency of X2
r = (N33 + N13/2 + N23/2)/N # r is the frequency of X3
#Genotype frequencies
f11 = N11/N # frequency of X11 genotype
f12 = N12/N # frequency of X12 genotype
f13 = N13/N # frequency of X13 genotype
f22 = N22/N # frequency of X22 genotype
f23 = N23/N # frequency of X23 genotype
f33 = N33/N # frequency of X33 genotype
# Expected HWE
E11 = N*p^2
E12 = N*2*p*q
E13 = N*2*p*r
E22 = N*q^2
E23 = N*2*q*r
E33 = N*r^2
# Chi-square value and probability
Chi_value = (N11-E11)^2/E11 + (N12-E12)^2/E12 + (N13-E13)^2/E13 + (N22-E22)^2/E22 + (N23-E23)^2/E23 + (N33-E33)^2/E33
prob = pchisq(Chi_value, df = 2, lower = F)
# Output
return (list("N" = N, "N11" = N11, "N12" = N12, "N13" = N13, "N22" = N22, "N23" = N23, "N33" = N33,
"p" = p, "q" = q, "r" = r,
"f11" = f11, "f12" = f12, "f13" = f13, "f22" = f22, "f23" = f23, "f33" = f33,
"Chi_value" = Chi_value, "prob" = prob))
}
# Estimate the frequencies of alleles A, B, and C
res <- HWE_test_3alleles(17, 86, 5, 61, 9, 0)
print(paste("Frequency of A (p):", round(res$p, 3)))
print(paste("Frequency of B (q):", round(res$q, 3)))
print(paste("Frequency of C (r):", round(res$r, 3)))
# Use a χ2 test to examine whether these data are consistent with HWE
critical_value = qchisq(0.95, df = 2)
chisq_value = round(res$Chi_value, 3)
if (chisq_value > critical_value){
print("The data are not consistent with Hardy-Weinberg Equilibrium.")
} else {
print("The data are consistent with Hardy-Weinberg Equilibrium.")
}
res <- freq_dominance(1-0.19, 0.19)
print(paste("Frequency of heterozygotes Aa:", round(results$f12, 3)))
res <- freq_dominance(0.19, 1-0.19)
print(paste("Frequency of heterozygotes Aa:", round(results$f12, 3)))
res <- freq_dominance(0.19, 1-0.19)
print(paste("Frequency of heterozygotes Aa:", round(res$f12, 3)))
res <- freq_dominance(1-0.19, 0.19)
print(paste("Frequency of heterozygotes Aa:", round(res$f12, 3)))
res <- freq_dominance(0.19, 1-0.19)
print(paste("Frequency of heterozygotes Aa:", round(res$f12, 3)))
res <- freq_dominance(1-0.09, 0.09)
print(paste("Frequency of heterozygotes Aa:", round(res$f12, 3)))
print(paste("The percent of the above population have cystic fibrosis:", cc*100))
cc <- 1/1700 # CF is recessive
res <- freq_dominance(1-cc, cc)
print(paste("The percent of the above population have cystic fibrosis:", cc*100))
print(paste("The percent of the above population have cystic fibrosis:", round(cc*100, 3))
print(paste("The percent of the above population have cystic fibrosis:", round(cc*100, 3)))
print(paste("The percent of the above population have cystic fibrosis:", round(cc*100, 3)))
print(paste("The percent of the above population have cystic fibrosis:", round(cc*100, 3), '%))
print(paste("The percent of the above population have cystic fibrosis:", round(cc*100, 3), '%'))
print("The percent of the above population have cystic fibrosis:", round(cc*100, 3), "%")
print(paste("The percent of the above population have cystic fibrosis:", round(cc * 100, 3), "%"))
res
he frequency of the recessive allele in the population.
# The frequency of the recessive allele in the population.
print(paste("Frequency of recessive allele in population:", round(res$q, 5)))
# The frequency of the dominant allele in the population.
print(paste("Frequency of dominant allele in population:", round(res$p, 5)))
# The percent of the above population have cystic fibrosis.
print(paste("The percent of the above population have cystic fibrosis:", round(cc*100, 3), "%"))
# The frequency of the recessive allele in the population.
print(paste("Frequency of recessive allele in population:", round(res$q, 5)))
# The frequency of the dominant allele in the population.
print(paste("Frequency of dominant allele in population:", round(res$p, 5)))
# The percentage of heterozygous individuals (carriers) in the population
print(paste("The percentage of carriers in the population is:", round(res$f12, 3)*100))
# The percentage of heterozygous individuals (carriers) in the population
print(paste("The percentage of carriers in the population is:", round(res$f12*100, 3), "%"))
aa <- 1/10000
res <- freq_dominance(1-cc, cc)
# The frequency of the recessive allele in the population.
print(paste("Frequency of recessive allele in population:", round(res$q, 5)))
# The percentage of heterozygous individuals (carriers) in the population
print(paste("The percentage of non-albino individuals that are carriers:", round(res$f12*100, 3), "%"))
aa <- 1/10000
res <- freq_dominance(1-cc, cc)
# The frequency of the recessive allele in the population.
print(paste("Frequency of recessive allele in population:", round(res$q, 5)))
# The percentage of heterozygous individuals (carriers) in the population
print(paste("The percentage of non-albino individuals that are carriers:", round(res$f12*100, 3), "%"))
res
cc <- 1/1700 # CF is recessive
res <- freq_dominance(1-cc, cc)
# The percent of the above population have cystic fibrosis.
print(paste("The percent of the above population have cystic fibrosis:", round(cc*100, 3), "%"))
# The frequency of the recessive allele in the population.
print(paste("Frequency of recessive allele in population:", round(res$q, 5)))
# The frequency of the dominant allele in the population.
print(paste("Frequency of dominant allele in population:", round(res$p, 5)))
# The percentage of heterozygous individuals (carriers) in the population
print(paste("The percentage of carriers in the population is:", round(res$f12*100, 3), "%"))
knitr::opts_chunk$set(echo = TRUE, fig.width = 6, fig.height = 4, fig.align = "center")
library(ggplot2)
# ESTIMATION OF GENOTYPE AND ALLELE FREQUENCIES FROM A GENOTYPING SURVEY
# One-gene two-alleles: X1 and X2
# Three genotypes:  X11, X12 and X22
# Sample size genotype ij -> Nij
# Create the function
gene_freq <- function(N11, N12, N22) {
N = N11 + N12 + N22 # N total sample
# Allele frequencies estimation
p = (N11 + N12/2)/N # p is the frequency of X1
q = 1 - p # q is the frequency of X2
# Genotype frequencies estimation
f11 = N11/N # frequency of X11 genotype
f12 = N12/N # frequency of X12 genotype
f22 = N22/N # frequency of X22 genotype
# Output
return (list("N" = N, "N11" = N11, "N12" = N12, "N22" = N22,
"p" = p, "q" = q,
"f11" = f11, "f12" = f12, "f22" = f22))
}
# Invoke the function
results = gene_freq(1787, 3037, 1305)
# Print results
print(paste0("Sample size = ",results$N," -> N11 = ",results$N11,", N12 = ", results$N12," and N22 = ",results$N22))
print(paste0("p = ", round(results$p,3)," and q = ",round(results$q,3)))
print(paste0("f11 = ",round(results$f11,3), ", f12 = ",round(results$f12,3)," and f22 = ", round(results$f22,3)))
# MENDELIAN POPULATION
# RANDOM MATING - HWE
# One-gene two-alleles: X1 and X2
# Three initial genotypes:  X11, X12 and X22
# Initial genotype frequencies: f11, f12, f22
# Create the function
random_mating <- function(f11, f12, f22) {
p = f11 + f12/2 # allele frequency of X1
q = 1 - p # allele frequency of X2
# Mating pairs (frequencies) probabilities
f11_11 = f11 * f11
f11_12 = 2 * f11 * f12
f11_22 = 2 * f11 * f22
f12_12 = f12 * f12
f12_22 = 2 * f12 * f22
f22_22 = f22 * f22
# Genotype probabilities of progeny (offspring) f11_, f12_, f22_
f11_ = f11_11 + f11_12/2 + f12_12/4
f12_ = f11_12/2 + f11_22 + f12_12/2 + f12_22/2
f22_ = f12_12/4 + f12_22/2 + f22_22
# Allele probability of progeny p_ and q_
p_ = f11_ + f12_/2
q_ = 1 - p_
# Output
return (list("p" = p, "q" = q,
"f11" = f11, "f12" = f12, "f22" = f22,
"p_" = p_, "q_" = q_,
"f11_" = f11_, "f12_" = f12_, "f22_" = f22_))
}
# Invoke the function
result <- random_mating(0.5, 0, 0.5)
# Print results
print(paste0("Allele prob. initial generation (p and q) ",result$p, result$q))
print(paste("Genotype prob. initial generation (f11, f12, f22) ",result$f11, result$f12,result$f22))
print(paste("Allele prob. next generation (p' and q') ",result$p_, result$q_))
print(paste("Genotype prob. next generation (f'11, f'12, f'22) ",result$f11_, result$f12_,result$f22_))
print(paste("Genotype prob. next generation according HWE ", result$p_ * result$p_, 2*result$p_ * result$q_,result$q_ * result$q_))
res1 <- random_mating(0.24, 0.32, 0.44)
print(paste("Genotype prob. next generation (P’1, Q’1, R’1) ",res1$f11_, res1$f12_,res1$f22_))
print(paste("Genotype prob. next generation according HWE ", res1$p_ * res1$p_, 2*res1$p_ * res1$q_,res1$q_ * res1$q_))
res2 <- random_mating(0.33, 0.14, 0.53)
print(paste("Genotype prob. next generation (P’2, Q’2, R’2) ",res2$f11_, res2$f12_,res2$f22_))
print(paste("Genotype prob. next generation according HWE ", res2$p_ * res2$p_, 2*res2$p_ * res2$q_,res2$q_ * res2$q_))
positive_genotypes <- function(f11, f12, f22) {
p = f11 + f12/2 # allele frequency of X1
q = 1 - p # allele frequency of X2
# Complete assortative positive mating among genotypes
ProbAllMatings = f11*f11 + f12*f12 + f22*f22
f11_11 = f11*f11/ProbAllMatings
f11_12 = 0
f11_22 = 0
f12_12 = f12*f12/ProbAllMatings
f12_22 = 0
f22_22 = f22*f22/ProbAllMatings
# Genotype probabilities of progeny (offspring) f11_, f12_, f22_
f11_ = f11_11
f12_ = f12_12
f22_ = f22_22
# Allele probability of progeny p_ and q_
p_ = f11_ + f12_/2
q_ = 1 - p_
# Output
return (list("p" = p, "q" = q,
"f11" = f11, "f12" = f12, "f22" = f22,
"p_" = p_, "q_" = q_,
"f11_" = f11_, "f12_" = f12_, "f22_" = f22_))
}
# Complete Assortative Positive Mating Among Phenotypes
assortative_positive_phenotypes <- function(f11, f12, f22) {
p = f11 + f12/2 # allele frequency of X1
q = 1 - p # allele frequency of X2
# Mating pairs (frequencies) probabilities for assortative positive mating among phenotypes
ProbAA_Mating = f11 * (f11 + f12) # AA mates with AA and Aa
ProbAa_Mating = f12 * (f11 + f12) # Aa mates with AA and Aa
Probaa_Mating = f22 * (f11 + f12 + f22) # aa mates with all genotypes
# Adjust mating probabilities based on phenotype
f11_11 = f11 * f11 / (ProbAA_Mating + ProbAa_Mating) # AA mates with AA and Aa
f11_12 = f11 * f12 / (ProbAA_Mating + ProbAa_Mating) # AA mates with AA and Aa
f11_22 = 0 # No mating with aa in assortative positive mating among phenotypes
f12_12 = f12 * f12 / (ProbAA_Mating + ProbAa_Mating) # Aa mates with AA and Aa
f12_22 = 0 # No mating with aa in assortative positive mating among phenotypes
f22_22 = f22 * f22 / Probaa_Mating # aa mates with all genotypes
# Genotype probabilities of progeny (offspring) f11_, f12_, f22_
f11_ = f11_11 + f11_12
f12_ = f12_12
f22_ = f22_22
# Allele probability of progeny p_ and q_
p_ = f11_ + f12_ / 2
q_ = 1 - p_
# Output
return(list("p" = p, "q" = q,
"f11" = f11, "f12" = f12, "f22" = f22,
"p_" = p_, "q_" = q_,
"f11_" = f11_, "f12_" = f12_, "f22_" = f22_))
}
qchisq(0.95, df = 1)
pchisq(0.048, df = 1, lower = F)
# HWE CHI-SQUARE TEST ON COUNTS FROM A GENOTYPING SURVEY
# One-gene two-alleles: X1 and X2
# Three initial genotypes:  X11, X12 and X22
# Sample size genotype ij -> Nij
# Create the function
HWE_test <- function(N11, N12, N22) {
N = N11 + N12 + N22 # N total sample
# Allele frequencies estimation
p = (N11 + N12/2)/N # p is the frequency of X1
q = 1 - p # q is the frequency of X2
#Genotype frequencies
f11 = N11/N # frequency of X11 genotype
f12 = N12/N # frequency of X12 genotype
f22 = N22/N # frequency of X22 genotype
# Expected HWE
E11 = N*p^2
E12 = N*2*p*q
E22 = N-E11-E12
# Chi-square value and probability
Chi_value = (N11-E11)^2/E11 + (N12-E12)^2/E12 + (N22-E22)^2/E22
prob = pchisq(Chi_value, df = 1, lower = F)
# Output
return (list("N" = N, "N11" = N11, "N12" = N12, "N22" = N22,
"p" = p, "q" = q,
"f11" = f11, "f12" = f12, "f22" = f22,
"Chi_value" = Chi_value, "prob" = prob))
}
# Invoke the function
results <- HWE_test(1787,3037,1305)
# Print results
print(paste("Sample size = ", results$N," -> N11 = ", results$N11,", N12 = ", results$N12,",N22 = ", results$N22))
print(paste("p = ",round(results$p,digits=3)," and q = ", round(results$q,digits=3) ))
print(paste("f11 = ",round(results$f11,digits=3),", f12 = ",round(results$f12,digits=3)," and f22 = ", round(results$f22,digits=3)))
print(paste("Chi-square value = ",round(results$Chi_value,3),"; Prob. = ",  round(results$prob,3)))
res <- HWE_test(305, 52, 4)
# Test for the deviation from HWE and its significance.
critical_value = qchisq(0.95, df = 1)
chisq_value = round(res$Chi_value,3)
if (chisq_value > critical_value){
print("There is a significant deviance from Hardy-Weinberg Equilibrium.") # reject H0
} else {
print("There is no significant deviance from Hardy-Weinberg Equilibrium.") # accept H0
}
# What proportion of children of women of phenotype N are expected to present the maternal phenotype?
print(paste("Proportion of children of women with phenotype N expected to have maternal phenotype (NN) = ", round(res$f22, 3)))
# Proportion of children of heterozygous MN women expected to have maternal phenotype (NN or MN)
print(paste("Proportion of children of heterozygous MN women expected to have maternal phenotype = ", round(res$f12 + res$f22, 3)))
# HWE CHI-SQUARE TEST ON COUNTS FROM A GENOTYPING SURVEY
# One-gene  3-alleles: X1, X2, X3
# Genotypes:  X11, X12, X13, X22, X23, X33
# Sample size genotype ij -> Nij
# The input data are the counts of each genotype ordered
# Create the function
HWE_test_3alleles <- function(N11, N12, N13, N22, N23, N33) {
N = N11 + N12 + N13 + N22 + N23 + N33 # N total sample
# Allele frequencies estimation
p = (N11 + N12/2 + N13/2)/N # p is the frequency of X1
q = (N22 + N12/2 + N23/2)/N # q is the frequency of X2
r = (N33 + N13/2 + N23/2)/N # r is the frequency of X3
#Genotype frequencies
f11 = N11/N # frequency of X11 genotype
f12 = N12/N # frequency of X12 genotype
f13 = N13/N # frequency of X13 genotype
f22 = N22/N # frequency of X22 genotype
f23 = N23/N # frequency of X23 genotype
f33 = N33/N # frequency of X33 genotype
# Expected HWE
E11 = N*p^2
E12 = N*2*p*q
E13 = N*2*p*r
E22 = N*q^2
E23 = N*2*q*r
E33 = N*r^2
# Chi-square value and probability
Chi_value = (N11-E11)^2/E11 + (N12-E12)^2/E12 + (N13-E13)^2/E13 + (N22-E22)^2/E22 + (N23-E23)^2/E23 + (N33-E33)^2/E33
prob = pchisq(Chi_value, df = 2, lower = F)
# Output
return (list("N" = N, "N11" = N11, "N12" = N12, "N13" = N13, "N22" = N22, "N23" = N23, "N33" = N33,
"p" = p, "q" = q, "r" = r,
"f11" = f11, "f12" = f12, "f13" = f13, "f22" = f22, "f23" = f23, "f33" = f33,
"Chi_value" = Chi_value, "prob" = prob))
}
# Estimate the frequencies of alleles A, B, and C
res <- HWE_test_3alleles(17, 86, 5, 61, 9, 0)
print(paste("Frequency of A (p):", round(res$p, 3)))
print(paste("Frequency of B (q):", round(res$q, 3)))
print(paste("Frequency of C (r):", round(res$r, 3)))
# Use a χ2 test to examine whether these data are consistent with HWE
critical_value = qchisq(0.95, df = 2)
chisq_value = round(res$Chi_value, 3)
if (chisq_value > critical_value){
print("The data are not consistent with Hardy-Weinberg Equilibrium.")
} else {
print("The data are consistent with Hardy-Weinberg Equilibrium.")
}
# ESTIMATION OF ALLELE AND GENOTYPE FREQUENCIES FROM COUNTS OF DOMINANT AND
# RECESSIVE PHENOTYPES ASSUMING HWE
# One-gene two-alleles with dominance: X1 > X2
# Three genotypes:  X11, X12 and X22
# Two phenotypes: N1_ and N22
# Sample size genotype ij -> Nij
# Create the function
freq_dominance <- function(NA_, Naa) {
N = NA_ + Naa # N total sample
# Phenotypic frequencies
faa = Naa/N # Frequency genotype aa
# Allele frequency
q = sqrt(faa)
p = 1 - q;
# Genotype frequencies according HWE
f11 = p^2
f12 = 2*p*q
f22 = q^2
# Output
return (list("N" = N, "NA_" = NA_, "Naa" = Naa,
"p" = p, "q" = q,
"f11" = f11, "f12" = f12, "f22" = f22))
}
# Invoke the function
results <- freq_dominance(170, 30)
# Print results
print(paste("Sample size = ", results$N," -> NA_ = ",results$NA_,",Naa = ", results$Naa))
print(paste("p = ",round(results$p,digits=3)," and q = ", round(results$q,digits=3) ))
print(paste("fAA = ",round(results$f11,digits=3),", fAa = ",
round(results$f12,digits=3)," and faa = ", round(results$f22,digits=3) ))
res <- freq_dominance(0.19, 1-0.19) # dominant, recessive
print(paste("Frequency of heterozygotes Aa:", round(res$f12, 3)))
res <- freq_dominance(1-0.09, 0.09)
print(paste("Frequency of heterozygotes Aa:", round(res$f12, 3)))
cc <- 1/1700 # CF is recessive
res <- freq_dominance(1-cc, cc)
# The percent of the above population have cystic fibrosis.
print(paste("The percent of the above population have cystic fibrosis:", round(cc*100, 3), "%"))
# The frequency of the recessive allele in the population.
print(paste("Frequency of recessive allele in population:", round(res$q, 5)))
# The frequency of the dominant allele in the population.
print(paste("Frequency of dominant allele in population:", round(res$p, 5)))
# The percentage of heterozygous individuals (carriers) in the population
print(paste("The percentage of carriers in the population is:", round(res$f12*100, 3), "%"))
aa <- 1/10000
res <- freq_dominance(1-cc, cc)
# The frequency of the recessive allele in the population.
print(paste("Frequency of recessive allele in population:", round(res$q, 5)))
# The percentage of heterozygous individuals (carriers) in the population
print(paste("The percentage of non-albino individuals that are carriers:", round(res$f12*100, 3), "%"))
res <- freq_dominance(1-0.09, 0.09)
print(paste("Frequency of heterozygotes Aa:", round(res$f12, 3)))
cc <- 1/1700 # CF is recessive
res <- freq_dominance(1-cc, cc)
# The percent of the above population have cystic fibrosis.
print(paste("The percent of the above population have cystic fibrosis:", round(cc*100, 3), "%"))
# The frequency of the recessive allele in the population.
print(paste("Frequency of recessive allele in population:", round(res$q, 5)))
# The frequency of the dominant allele in the population.
print(paste("Frequency of dominant allele in population:", round(res$p, 5)))
# The percentage of heterozygous individuals (carriers) in the population
print(paste("The percentage of carriers in the population is:", round(res$f12*100, 3), "%"))
res <- freq_dominance(1-cc, cc)
# The frequency of the recessive allele in the population.
print(paste("Frequency of recessive allele in population:", round(res$q, 5)))
# The percentage of heterozygous individuals (carriers) in the population
print(paste("The percentage of non-albino individuals that are carriers:", round(res$f12*100, 3), "%"))
print(paste("The percentage of carriers in the population is:", round(res$f12*100, 3), "%"))
# The frequency of the recessive allele in the population.
print(paste("Frequency of recessive allele in population:", round(res$q, 5)))
res
print(paste("Frequency of recessive allele in population:", round(res$q, 5)))
aa <- 1/10000
res <- freq_dominance(1-aa, aa)
# The frequency of the recessive allele in the population.
print(paste("Frequency of recessive allele in population:", round(res$q, 5)))
# The percentage of heterozygous individuals (carriers) in the population
print(paste("The percentage of non-albino individuals that are carriers:", round(res$f12*100, 3), "%"))
print(s1(0.5, 0.1, 0.4))
# SCENARIO 1: Complete assortative positive mating among genotypes
s1 <- function(f11, f12, f22) {
p = f11 + f12/2 # allele frequency of X1
q = 1 - p # allele frequency of X2
# Mating pairs (frequencies) probabilities
ProbAllMatings= f11*f11 + f12*f12 + f22*f22
f11_11 = f11*f11/ProbAllMatings
f11_12 = 0
f11_22 = 0
f12_12 = f12*f12/ProbAllMatings
f12_22 = 0
f22_22 = f22*f22/ProbAllMatings
# Genotype probabilities of progeny (offspring) f11_, f12_, f22_
f11_ = f11_11 + f11_12/2 + f12_12/4
f12_ = f11_12/2 + f11_22 + f12_12/2 + f12_22/2
f22_ = f12_12/4 + f12_22/2 + f22_22
# Allele probability of progeny p_ and q_
p_ = f11_ + f12_/2
q_ = 1 - p_
# Output
return (list("p" = p, "q" = q,
"f11" = f11, "f12" = f12, "f22" = f22,
"p_" = p_, "q_" = q_,
"f11_" = f11_, "f12_" = f12_, "f22_" = f22_))
}
# SCENARIO 2: Complete assortative positive mating among phenotypes
s2 <- function(f11, f12, f22) {
p = f11 + f12/2 # allele frequency of X1
q = 1 - p # allele frequency of X2
# Mating pairs (frequencies) probabilities
ProbAllMatings= f11*f11 + f12*f12 + f22*f22
f11_11 = f11*f11/ProbAllMatings
f11_12 = 2*f11*f12/ProbAllMatings
f11_22 = 0
f12_12 = f12*f12/ProbAllMatings
f12_22 = 0
f22_22 = f22*f22/ProbAllMatings
# Genotype probabilities of progeny (offspring) f11_, f12_, f22_
f11_ = f11_11 + f11_12/2 + f12_12/4
f12_ = f11_12/2 + f11_22 + f12_12/2 + f12_22/2
f22_ = f12_12/4 + f12_22/2 + f22_22
# Allele probability of progeny p_ and q_
p_ = f11_ + f12_/2
q_ = 1 - p_
# Output
return (list("p" = p, "q" = q,
"f11" = f11, "f12" = f12, "f22" = f22,
"p_" = p_, "q_" = q_,
"f11_" = f11_, "f12_" = f12_, "f22_" = f22_))
}
# SCENARIO 3: Complete assortative negative mating among genotypes
s3 <- function(f11, f12, f22) {
p = f11 + f12/2 # allele frequency of X1
q = 1 - p # allele frequency of X2
# Mating pairs (frequencies) probabilities
ProbAllMatings= f11*f11 + f12*f12 + f22*f22
f11_11 = 0
f11_12 = 2*f11*f12/ProbAllMatings
f11_22 = 2*f11*f22/ProbAllMatings
f12_12 = 0
f12_22 = 2*f12*f22/ProbAllMatings
f22_22 = 0
# Genotype probabilities of progeny (offspring) f11_, f12_, f22_
f11_ = f11_11 + f11_12/2 + f12_12/4
f12_ = f11_12/2 + f11_22 + f12_12/2 + f12_22/2
f22_ = f12_12/4 + f12_22/2 + f22_22
# Allele probability of progeny p_ and q_
p_ = f11_ + f12_/2
q_ = 1 - p_
# Output
return (list("p" = p, "q" = q,
"f11" = f11, "f12" = f12, "f22" = f22,
"p_" = p_, "q_" = q_,
"f11_" = f11_, "f12_" = f12_, "f22_" = f22_))
}
# SCENARIO 4: Complete assortative negative mating among phenotypes
s4 <- function(f11, f12, f22) {
p = f11 + f12/2 # allele frequency of X1
q = 1 - p # allele frequency of X2
# Mating pairs (frequencies) probabilities
ProbAllMatings= f11*f11 + f12*f12 + f22*f22
f11_11 = 0
f11_12 = 0
f11_22 = 2*f11*f22/ProbAllMatings
f12_12 = 0
f12_22 = 2*f12*f22/ProbAllMatings
f22_22 = 0
# Genotype probabilities of progeny (offspring) f11_, f12_, f22_
f11_ = f11_11 + f11_12/2 + f12_12/4
f12_ = f11_12/2 + f11_22 + f12_12/2 + f12_22/2
f22_ = f12_12/4 + f12_22/2 + f22_22
# Allele probability of progeny p_ and q_
p_ = f11_ + f12_/2
q_ = 1 - p_
# Output
return (list("p" = p, "q" = q,
"f11" = f11, "f12" = f12, "f22" = f22,
"p_" = p_, "q_" = q_,
"f11_" = f11_, "f12_" = f12_, "f22_" = f22_))
}
print(s1(0.5, 0.1, 0.4))
print(s1(0.5, 0.1, 0.4))
print(s2(0.5, 0.1, 0.4))
print(s3(0.5, 0.1, 0.4))
print(s4(0.5, 0.1, 0.4))
